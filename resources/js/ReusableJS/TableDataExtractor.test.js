// Generated by Qodo Gen
import { TableDataExtractor } from './TableDataExtractor';
describe('TableDataExtractor', () => {
    // Process multiple tables with valid configurations and return combined data
    it('should process multiple tables and return combined data when valid configurations provided', () => {
        document.body.innerHTML = `
        <table id="table1">
          <tbody>
            <tr><td><input class="name" value="John"/></td></tr>
          </tbody>
        </table>
        <table id="table2">
          <tbody>
            <tr><td><input class="age" value="25"/></td></tr>
          </tbody>
        </table>
      `;

        const tableConfigs = {
            users: {
                id: 'table1',
                selectors: { name: '.name' },
                requiredFields: ['name'],
            },
            details: {
                id: 'table2',
                selectors: { age: '.age' },
                requiredFields: ['age'],
            },
        };

        const result = TableDataExtractor(tableConfigs);

        expect(result).toEqual({
            users: [{ name: 'John' }],
            details: [{ age: '25' }],
        });
    });

    // Extract data from tables with all required fields present
    it('should extract data when all required fields are present in table', () => {
        document.body.innerHTML = `
        <table id="userTable">
          <tbody>
            <tr>
              <td><input class="name" value="John"/></td>
              <td><input class="email" value="john@test.com"/></td>
            </tr>
          </tbody>
        </table>
      `;

        const tableConfigs = {
            users: {
                id: 'userTable',
                selectors: {
                    name: '.name',
                    email: '.email',
                },
                requiredFields: ['name', 'email'],
            },
        };

        const result = TableDataExtractor(tableConfigs);

        expect(result.users).toEqual([
            { name: 'John', email: 'john@test.com' },
        ]);
    });

    // Handle invalid table IDs that don't exist in DOM
    it('should return empty array when table ID does not exist in DOM', () => {
        document.body.innerHTML = '';

        const tableConfigs = {
            users: {
                id: 'nonexistentTable',
                selectors: { name: '.name' },
                requiredFields: ['name'],
            },
        };

        const result = TableDataExtractor(tableConfigs);

        expect(result.users).toEqual([]);
    });

    // Process tables with missing required fields
    it('should skip rows with missing required fields', () => {
        document.body.innerHTML = `
        <table id="userTable">
          <tbody>
            <tr>
              <td><input class="name" value="John"/></td>
              <td><input class="email" value=""/></td>
            </tr>
            <tr>
              <td><input class="name" value="Jane"/></td>
              <td><input class="email" value="jane@test.com"/></td>
            </tr>
          </tbody>
        </table>
      `;

        const tableConfigs = {
            users: {
                id: 'userTable',
                selectors: {
                    name: '.name',
                    email: '.email',
                },
                requiredFields: ['name', 'email'],
            },
        };

        const result = TableDataExtractor(tableConfigs);

        expect(result.users).toEqual([
            { name: 'Jane', email: 'jane@test.com' },
        ]);
    });
});
